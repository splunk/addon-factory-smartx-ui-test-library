name: build-test-release
on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  fossa-scan:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: run fossa analyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v3
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  compliance-copyrights:
    name: Compliance Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.4.0

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - uses: pre-commit/action@v3.0.0

  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    if: github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v3
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  run-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      - name: Test with pytest
        run: |
          poetry install
          poetry run pytest -v tests/unit

  build:
    name: build
    runs-on: ubuntu-latest
    needs:
      - fossa-scan
      - compliance-copyrights
      - pre-commit
      - run-unit-tests
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install tools
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      - name: Build Package
        id: uccgen
        run: |
          poetry install
          poetry run poetry-dynamic-versioning
          poetry build
      - name: artifact-splunk-unpacked
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: dist/*
        if: always()

  run-ui-tests:
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        splunk: ["8.2"]
        browser: ["chrome", "firefox", "firefox_grid", "chrome_grid"]
        test_suit: [
          "test_splunk_ta_example_addon_logging",
          "test_splunk_ta_example_addon_account",
          "test_splunk_ta_example_addon_proxy",
          "test_splunk_ta_example_addon_input",
          "test_splunk_ta_example_addon_custom",
          "test_splunk_ta_example_addon_alert_actions"
        ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/download-artifact@v3
        with:
          name: package
          path: dist/
      - name: update submodule
        run: |
            git submodule sync
            git submodule update --recursive --remote
      - name: Downloading Example-TA
        run: |
            cd tests/deps/splunk-add-on-for-ucc-example
            mkdir output 
            cd output
            pwd
            curl -s https://api.github.com/repos/splunk/splunk-add-on-for-ucc-example/releases/latest | grep "Splunk_TA.*.spl" | grep -v search_head | grep -v indexer | grep -v forwarder | cut -d : -f 2,3 | tr -d \" | wget -qi - || true
            ls
            tar -xzf Splunk_TA*.spl
            ls
            rm Splunk_TA*.spl
            ls
      - name: Setup for testing
        run: |
          echo "Setup for Testing..."
          pip install git+https://github.com/pixelb/crudini
          mkdir test-results
          cp -r tests/deps/splunk-add-on-for-ucc-example/output output
      - name: Splunk Testing
        run: |
          SPLUNK_VERSION=$(crudini --get tests/deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "${{ matrix.splunk }}" VERSION)
          export SPLUNK_VERSION
          SPLUNK_APP_ID=$(crudini --get tests/deps/splunk-add-on-for-ucc-example/package/default/app.conf id name)
          export SPLUNK_APP_ID
          SPLUNK_APP_PACKAGE=tests/deps/splunk-add-on-for-ucc-example/output/$(ls tests/deps/splunk-add-on-for-ucc-example/output/)
          export SPLUNK_APP_PACKAGE
          export TEST_SET=tests/ui
          export TEST_BROWSER="${{ matrix.browser }}"
          export TEST_SUITE="-k ${{ matrix.test_suit }}"
          export SAUCE_USERNAME="${{ secrets.SAUCE_USERNAME }}"
          export SAUCE_PASSWORD="${{ secrets.SAUCE_PASSWORD }}"
          export SAUCE_TUNNEL_ID="${{ secrets.SAUCE_TUNNEL_ID }}"
          JOB_NAME="GithubActions::${GITHUB_REPOSITORY#splunk/}[${GITHUB_REF#refs/heads/}][${{ matrix.browser }}] #$(date +%s)"
          export JOB_NAME
          SAUCE_IDENTIFIER=$SAUCE_IDENTIFIER-$(cat /proc/sys/kernel/random/uuid)
          export SAUCE_IDENTIFIER
          echo "environment setup..."
          echo "$SPLUNK_VERSION"
          echo "$SPLUNK_APP_ID"
          echo "$SPLUNK_APP_PACKAGE"
          echo "$TEST_SET"
          echo "$TEST_BROWSER"
          echo "$TEST_SUITE"
          echo "Testing..."
          docker-compose -f docker-compose-ci.yml build
          # Saucelab connection
          docker-compose -f docker-compose-ci.yml up -d sauceconnect
          
          # Start selenium grid if needed.
          if [[ "$TEST_BROWSER" == *"firefox_grid"* ]]; then docker-compose -f docker-compose-ci.yml up -d firefox-grid; fi
          if [[ "$TEST_BROWSER" == *"chrome_grid"* ]]; then docker-compose -f docker-compose-ci.yml up -d chrome-grid; fi
          # Start Splunk
          docker-compose -f docker-compose-ci.yml up -d splunk
          until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done
          # Normal Inspecting
          docker-compose -f docker-compose-ci.yml logs sauceconnect
          docker ps -a
          # Run the tests
          test_exit_code=0
          docker-compose -f docker-compose-ci.yml up  --abort-on-container-exit test || test_exit_code=$?
          # Collect Results
          docker container create --name dummy \
                              -v addon-factory-smartx-ui-test-library_results:/work/test-results \
                              registry.access.redhat.com/ubi7/ubi
          docker cp dummy:/work/test-results/test.xml test-results/ || true
          docker cp dummy:/work/test-results/test.xml test-results/  || true
          docker cp dummy:/work/assets test-results/assets  || true
          docker cp dummy:/work/test-results/report.html test-results/report.html  || true
          docker-compose -f docker-compose-ci.yml down || true
          echo exit code "$test_exit_code"
          exit "$test_exit_code"
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.splunk }}_${{ matrix.python-version }}_${{ matrix.browser }}_${{ matrix.test_suit }}
          path: test-results/*
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: test-report-${{ matrix.splunk }}_${{ matrix.python-version }}_${{ matrix.browser }}_${{ matrix.test_suit }}
          path: "test-results/*.xml"
          reporter: java-junit

  publish:
    needs:
      - pre-commit
      - build
      - run-ui-tests
      - run-unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3.0.0
        with:
          semantic_version: 19.0.2
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
