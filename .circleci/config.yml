#
version: 2.1
orbs:
  go: circleci/go@0.2.0
commands:
  test_smartx:
    parameters:
      test_suite:
        description: Test Suite
        type: string
        default: -k test_splunk_ta_example_addon_account
      browser:
        description: Browser name
        type: string
        default: firefox
      splunk_version:
        description: Image version
        type: string
        default: latest
    steps:
    - run:
        name: Downloading Example-TA
        command: |
          cd tests/deps/splunk-add-on-for-ucc-example
          mkdir output 
          cd output
          pwd
          curl -s https://api.github.com/repos/splunk/splunk-add-on-for-ucc-example/releases/latest | grep "Splunk_TA.*tar.gz" | grep -v search_head | grep -v indexer | grep -v forwarder | cut -d : -f 2,3 | tr -d \" | wget -qi - || true
          ls
          tar -xzf *.tar.gz
          ls
          rm *.tar.gz
          ls
    - run:
        name: Setup for testing
        command: |
          echo "Setup for Testing..."
          pip install git+https://github.com/pixelb/crudini
          mkdir test-results
          cp -r /tmp/workspace/dist dist
          cp -r tests/deps/splunk-add-on-for-ucc-example/output output
    - run:
        name: Splunk Testing
        command: |
          export SPLUNK_VERSION=$(crudini --get tests/deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk_version>>" VERSION)
          export SPLUNK_APP_ID=$(crudini --get tests/deps/splunk-add-on-for-ucc-example/package/default/app.conf id name)
          export SPLUNK_APP_PACKAGE=tests/deps/splunk-add-on-for-ucc-example/output/$(ls tests/deps/splunk-add-on-for-ucc-example/output/)
          export TEST_SET=tests/ui
          export TEST_BROWSER="<<parameters.browser>>"
          export TEST_SUITE="-k <<parameters.test_suite>>"
          export JOB_NAME="CircleCI::$CIRCLE_PROJECT_REPONAME[$CIRCLE_BRANCH][$TEST_BROWSER] #$CIRCLE_BUILD_NUM"
          export SAUCE_IDENTIFIER=$SAUCE_IDENTIFIER-$(cat /proc/sys/kernel/random/uuid)
          echo "environment setup..."
          echo $SPLUNK_VERSION
          echo $SPLUNK_APP_ID
          echo $SPLUNK_APP_PACKAGE
          echo $TEST_SET
          echo $TEST_BROWSER
          echo $TEST_SUITE
          echo "Testing..."
          docker-compose -f docker-compose-ci.yml build

          # Saucelab connection
          docker-compose -f docker-compose-ci.yml up -d sauceconnect 

          # Start Splunk
          docker-compose -f docker-compose-ci.yml up -d splunk
          until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done

          # Normal Inspecting
          docker-compose -f docker-compose-ci.yml logs sauceconnect
          docker ps -a

          # Run the tests
          test_exit_code=0
          docker-compose -f docker-compose-ci.yml up  --abort-on-container-exit test || test_exit_code=$?
          
          # Collect Results
          docker container create --name dummy \
                              -v project_results:/home/circleci/work \
                              registry.access.redhat.com/ubi7/ubi
          docker cp dummy:/home/circleci/work/test-results/test.xml test-results/  || true
          docker cp dummy:/home/circleci/work/assets test-results/assets  || true
          docker cp dummy:/home/circleci/work/report.html test-results/report.html  || true
          
          docker-compose -f docker-compose-ci.yml down || true
          
          echo exit code "$test_exit_code"
          exit "$test_exit_code"


    - store_artifacts:
        path: test-results
        destination: test-results
    - store_test_results:
        path: test-results

jobs:
  build:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry build
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

  test:
    docker:
      - image: circleci/python:3.7-node
    parameters:
      splunk_version:
        description: Image version
        type: string
        default: latest
      test_suite:
        description: Test Suite
        type: string
        default: -k test_splunk_ta_example_addon_account
      browser:
        description: Browser name
        type: string
        default: firefox

    steps:
      - checkout
      - run:
          name: Update Submodules
          command: |
            git submodule sync
            git submodule update --init --recursive
            git submodule update --remote --merge
      - run:
          name: Update Example TA submodules
          command: |
            cd tests/deps/splunk-add-on-for-ucc-example
            git submodule sync
            git submodule update --init --recursive
            git submodule update --remote --merge
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true            
      - test_smartx:
            splunk_version: <<parameters.splunk_version>>
            browser: <<parameters.browser>>
            test_suite: <<parameters.test_suite>>

  semgrep:
    environment:
        SEMGREP_REPO_URL: << pipeline.project.git_url >>
        SEMGREP_BRANCH: << pipeline.git.branch >>
    docker:
      - image: returntocorp/semgrep-agent:v1
        user: root
    steps:
      - checkout
      - run:
          name: "Install Dependencies"
          command: |
            pip3 install --upgrade semgrep
      - run:
          name: "Semgrep Scan"
          no_output_timeout: 1h
          command: |
            export SEMGREP_REPO_NAME=splunk/${CIRCLE_PROJECT_REPONAME}
            python -m semgrep_agent --publish-deployment ${SEMGREP_DEPLOYMENT_ID} --publish-token ${SEMGREP_PUBLISH_TOKEN}
            # Generate the Semgrep Dashboard URL
            export REPO_BRANCH=$(echo "<< pipeline.git.branch >>")
            DASHBOARD_URL=$(python3 -c "from urllib.parse import quote; import os; print('https://semgrep.dev/manage/findings?repo=' + quote(os.environ['SEMGREP_REPO_NAME'], safe='') + '&tab=findings&ref_type=branch&ref=' + quote(os.environ['REPO_BRANCH'], safe=''))")
            echo "View Result at Semgrep Dashboard: $DASHBOARD_URL"
            
            # Semgrep Exclude files
            dos2unix .semgrepignore
            SEMGREP_EXCLUDE=$(sed "/^#/d" .semgrepignore | sed "/^:/d" | sed -r '/^\s*$/d' | sed ':a;N;$!ba;s/\n/ --exclude /g')
            echo "Excluding Semgrep Files: --exclude $SEMGREP_EXCLUDE"
            # Generate xml file
            semgrep --config="p/r2c-ci" --config="p/r2c-security-audit" --config="p/bandit" --error --strict --timeout=0 --junit-xml -o /root/project/test-results/semgrep-scan.xml --exclude $SEMGREP_EXCLUDE     
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  release:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run: npx semantic-release

  publish-pypi:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            export PATH=~/.npm-global/bin:$PATH
            poetry install
            poetry run poetry-dynamic-versioning
            poetry publish --build -u $PYPI_USERNAME -p $PYPI_TOKEN
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - semgrep:
          context:
            - gdi-semgrep      
          filters:
            branches:
              only: /.*/
      - test:
          context:
            - gdi-saucelabs
            - gdi-reportportal
          requires:
            - build
          matrix:
            parameters:
              splunk_version: ["8.1"]
              browser: ["firefox", "chrome"]
              test_suite: 
                - "test_splunk_ta_example_addon_logging"
                - "test_splunk_ta_example_addon_account"
                - "test_splunk_ta_example_addon_input"
                - "test_splunk_ta_example_addon_proxy"
                - "test_splunk_ta_example_addon_custom"
                - "test_splunk_ta_example_addon_alert_actions"
      - release:
          requires:
            - test
          context:
            - gdi-github

  publish:
    jobs:
      - publish-pypi:
          context:
            - gdi-pypi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/